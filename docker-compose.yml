x-superset-image: &superset-image apachesuperset.docker.scarf.sh/apache/superset:${TAG:-latest}
x-superset-volumes: &superset-volumes
  - type: bind
    source: ./superset/docker
    target: /app/docker
  - type: bind
    source: ./scripts
    target: /app/scripts
  - type: bind
    source: ./superset_home
    target: /app/superset_home
  - type: bind
    source: ./config
    target: /app/config
x-superset-env_file: &env_file
  - ./.env

services:
  postgres:
    image: postgres:14-alpine
    container_name: postgres_prod
    restart: unless-stopped
    cpus: '1.0'
    env_file: *env_file
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./superset/docker/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    command: >
      postgres
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c work_mem=8MB
      -c maintenance_work_mem=64MB
    networks:
      - houseaccount_network

  ledger_ingest:
    build:
      context: .
      dockerfile: ledger_ingest/docker/Dockerfile
    container_name: ledger_ingest_prod
    restart: unless-stopped
    cpus: '2.0'
    env_file: *env_file
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    volumes:
      - ./data:/app/data
      - ./config:/app/config
      - ./logs:/app/logs
    working_dir: /app
    networks:
      - houseaccount_network

  redis:
    image: redis:7
    container_name: superset_cache_prod
    restart: unless-stopped
    cpus: '0.5'
    volumes:
      - ./redis:/data
    networks:
      - houseaccount_network

  superset:
    image: *superset-image
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    container_name: superset_prod
    restart: unless-stopped
    cpus: '2.0'
    env_file: *env_file
    ports:
      - "8088:8088"
    depends_on:
      superset-init:
        condition: service_completed_successfully
    volumes: *superset-volumes
    networks:
      - houseaccount_network
  
  superset-init:
    image: *superset-image
    container_name: superset_init_prod
    command: ["/app/docker/docker-init.sh"]
    env_file: *env_file
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
    volumes: *superset-volumes
    networks:
      - houseaccount_network
    healthcheck:
      disable: true

  superset-worker:
    image: *superset-image
    container_name: superset_worker_prod
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: *env_file
    restart: unless-stopped
    depends_on:
      superset-init:
        condition: service_completed_successfully
    volumes: *superset-volumes
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]
    networks:
      - houseaccount_network

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat_prod
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: *env_file
    restart: unless-stopped
    depends_on:
      superset-init:
        condition: service_completed_successfully
    volumes: *superset-volumes
    networks:
      - houseaccount_network
    healthcheck:
      disable: true

networks:
  houseaccount_network:
    driver: bridge

volumes:
  postgres_data:
    external: false
  redis:
    external: false
  superset_home:
    external: false